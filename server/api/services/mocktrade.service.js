"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../common/logger"));

var _models = _interopRequireDefault(require("../models"));

var _Utils = _interopRequireDefault(require("../common/Utils"));

var _mongoose = _interopRequireDefault(require("mongoose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MockTradeService {
  async queryMockTradesByUser(accessToken) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    return _models.default.MockTrade.findByUserId(userId);
  }

  async queryHistoryMockTrades(accessToken, createdDate, code) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    return _models.default.MockTrade.findByUserIdAndDateAndCode(userId, createdDate, code);
  }

  async updateMockTrade(accessToken, mockTradeId, update) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    _logger.default.info(`userId = ${userId}, update mockTradeId = ${mockTradeId} with update = ${JSON.stringify(update)}`);

    return _models.default.MockTrade.findOneAndUpdate({
      userId: _mongoose.default.Types.ObjectId(userId),
      _id: _mongoose.default.Types.ObjectId(mockTradeId)
    }, update, {
      new: true
    });
  }

  async createMockTrade(accessToken, strategyId, params) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    let mockTrade = new _models.default.MockTrade({
      code: params.code,
      userId: _mongoose.default.Types.ObjectId(userId),
      strategyId: _mongoose.default.Types.ObjectId(strategyId),
      createDate: Date.now(),
      params: params
    });

    _logger.default.info(`userId = ${userId} create mock trade = ${mockTrade}`);

    return mockTrade.save();
  }

}

var _default = new MockTradeService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hcGkvc2VydmljZXMvbW9ja3RyYWRlLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiTW9ja1RyYWRlU2VydmljZSIsInF1ZXJ5TW9ja1RyYWRlc0J5VXNlciIsImFjY2Vzc1Rva2VuIiwidXNlcklkIiwiVXRpbHMiLCJnZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4iLCJtb2RlbHMiLCJNb2NrVHJhZGUiLCJmaW5kQnlVc2VySWQiLCJxdWVyeUhpc3RvcnlNb2NrVHJhZGVzIiwiY3JlYXRlZERhdGUiLCJjb2RlIiwiZmluZEJ5VXNlcklkQW5kRGF0ZUFuZENvZGUiLCJ1cGRhdGVNb2NrVHJhZGUiLCJtb2NrVHJhZGVJZCIsInVwZGF0ZSIsImwiLCJpbmZvIiwiSlNPTiIsInN0cmluZ2lmeSIsImZpbmRPbmVBbmRVcGRhdGUiLCJtb25nb29zZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJfaWQiLCJuZXciLCJjcmVhdGVNb2NrVHJhZGUiLCJzdHJhdGVneUlkIiwicGFyYW1zIiwibW9ja1RyYWRlIiwiY3JlYXRlRGF0ZSIsIkRhdGUiLCJub3ciLCJzYXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxnQkFBTixDQUF1QjtBQUVuQixRQUFNQyxxQkFBTixDQUE0QkMsV0FBNUIsRUFBd0M7QUFDcEMsUUFBSUMsTUFBTSxHQUFHQyxlQUFNQyx3QkFBTixDQUErQkgsV0FBL0IsQ0FBYjs7QUFDQSxXQUFPSSxnQkFBT0MsU0FBUCxDQUFpQkMsWUFBakIsQ0FBOEJMLE1BQTlCLENBQVA7QUFDSDs7QUFHRCxRQUFNTSxzQkFBTixDQUE2QlAsV0FBN0IsRUFBMENRLFdBQTFDLEVBQXVEQyxJQUF2RCxFQUE0RDtBQUN4RCxRQUFJUixNQUFNLEdBQUdDLGVBQU1DLHdCQUFOLENBQStCSCxXQUEvQixDQUFiOztBQUNBLFdBQU9JLGdCQUFPQyxTQUFQLENBQWlCSywwQkFBakIsQ0FBNENULE1BQTVDLEVBQW9ETyxXQUFwRCxFQUFpRUMsSUFBakUsQ0FBUDtBQUNIOztBQUdELFFBQU1FLGVBQU4sQ0FBc0JYLFdBQXRCLEVBQW1DWSxXQUFuQyxFQUFnREMsTUFBaEQsRUFBdUQ7QUFDbkQsUUFBSVosTUFBTSxHQUFHQyxlQUFNQyx3QkFBTixDQUErQkgsV0FBL0IsQ0FBYjs7QUFDQWMsb0JBQUVDLElBQUYsQ0FBUSxZQUFXZCxNQUFPLDBCQUF5QlcsV0FBWSxrQkFBaUJJLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixNQUFmLENBQXVCLEVBQXZHOztBQUNBLFdBQU9ULGdCQUFPQyxTQUFQLENBQWlCYSxnQkFBakIsQ0FBa0M7QUFBQ2pCLE1BQUFBLE1BQU0sRUFBR2tCLGtCQUFTQyxLQUFULENBQWVDLFFBQWYsQ0FBd0JwQixNQUF4QixDQUFWO0FBQTJDcUIsTUFBQUEsR0FBRyxFQUFHSCxrQkFBU0MsS0FBVCxDQUFlQyxRQUFmLENBQXdCVCxXQUF4QjtBQUFqRCxLQUFsQyxFQUEwSEMsTUFBMUgsRUFBa0k7QUFBQ1UsTUFBQUEsR0FBRyxFQUFHO0FBQVAsS0FBbEksQ0FBUDtBQUNIOztBQUVELFFBQU1DLGVBQU4sQ0FBc0J4QixXQUF0QixFQUFtQ3lCLFVBQW5DLEVBQStDQyxNQUEvQyxFQUFzRDtBQUNsRCxRQUFJekIsTUFBTSxHQUFHQyxlQUFNQyx3QkFBTixDQUErQkgsV0FBL0IsQ0FBYjs7QUFDQSxRQUFJMkIsU0FBUyxHQUFHLElBQUl2QixnQkFBT0MsU0FBWCxDQUFxQjtBQUNqQ0ksTUFBQUEsSUFBSSxFQUFHaUIsTUFBTSxDQUFDakIsSUFEbUI7QUFFakNSLE1BQUFBLE1BQU0sRUFBR2tCLGtCQUFTQyxLQUFULENBQWVDLFFBQWYsQ0FBd0JwQixNQUF4QixDQUZ3QjtBQUdqQ3dCLE1BQUFBLFVBQVUsRUFBR04sa0JBQVNDLEtBQVQsQ0FBZUMsUUFBZixDQUF3QkksVUFBeEIsQ0FIb0I7QUFJakNHLE1BQUFBLFVBQVUsRUFBR0MsSUFBSSxDQUFDQyxHQUFMLEVBSm9CO0FBS2pDSixNQUFBQSxNQUFNLEVBQUdBO0FBTHdCLEtBQXJCLENBQWhCOztBQU9BWixvQkFBRUMsSUFBRixDQUFRLFlBQVdkLE1BQU8sd0JBQXVCMEIsU0FBVSxFQUEzRDs7QUFDQSxXQUFPQSxTQUFTLENBQUNJLElBQVYsRUFBUDtBQUNIOztBQS9Ca0I7O2VBa0NSLElBQUlqQyxnQkFBSixFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGwgZnJvbSAnLi4vLi4vY29tbW9uL2xvZ2dlcic7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uL2NvbW1vbi9VdGlscydcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xyXG5cclxuY2xhc3MgTW9ja1RyYWRlU2VydmljZSB7XHJcblxyXG4gICAgYXN5bmMgcXVlcnlNb2NrVHJhZGVzQnlVc2VyKGFjY2Vzc1Rva2VuKXtcclxuICAgICAgICBsZXQgdXNlcklkID0gVXRpbHMuZ2V0VXNlcklkRnJvbUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKTtcclxuICAgICAgICByZXR1cm4gbW9kZWxzLk1vY2tUcmFkZS5maW5kQnlVc2VySWQodXNlcklkKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgcXVlcnlIaXN0b3J5TW9ja1RyYWRlcyhhY2Nlc3NUb2tlbiwgY3JlYXRlZERhdGUsIGNvZGUpe1xyXG4gICAgICAgIGxldCB1c2VySWQgPSBVdGlscy5nZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4oYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIHJldHVybiBtb2RlbHMuTW9ja1RyYWRlLmZpbmRCeVVzZXJJZEFuZERhdGVBbmRDb2RlKHVzZXJJZCwgY3JlYXRlZERhdGUsIGNvZGUpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhc3luYyB1cGRhdGVNb2NrVHJhZGUoYWNjZXNzVG9rZW4sIG1vY2tUcmFkZUlkLCB1cGRhdGUpe1xyXG4gICAgICAgIGxldCB1c2VySWQgPSBVdGlscy5nZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4oYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIGwuaW5mbyhgdXNlcklkID0gJHt1c2VySWR9LCB1cGRhdGUgbW9ja1RyYWRlSWQgPSAke21vY2tUcmFkZUlkfSB3aXRoIHVwZGF0ZSA9ICR7SlNPTi5zdHJpbmdpZnkodXBkYXRlKX1gKTtcclxuICAgICAgICByZXR1cm4gbW9kZWxzLk1vY2tUcmFkZS5maW5kT25lQW5kVXBkYXRlKHt1c2VySWQgOiBtb25nb29zZS5UeXBlcy5PYmplY3RJZCh1c2VySWQpLCBfaWQgOiBtb25nb29zZS5UeXBlcy5PYmplY3RJZChtb2NrVHJhZGVJZCl9LCB1cGRhdGUsIHtuZXcgOiB0cnVlfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjcmVhdGVNb2NrVHJhZGUoYWNjZXNzVG9rZW4sIHN0cmF0ZWd5SWQsIHBhcmFtcyl7XHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IFV0aWxzLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgbGV0IG1vY2tUcmFkZSA9IG5ldyBtb2RlbHMuTW9ja1RyYWRlKHtcclxuICAgICAgICAgICAgY29kZSA6IHBhcmFtcy5jb2RlLFxyXG4gICAgICAgICAgICB1c2VySWQgOiBtb25nb29zZS5UeXBlcy5PYmplY3RJZCh1c2VySWQpLFxyXG4gICAgICAgICAgICBzdHJhdGVneUlkIDogbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQoc3RyYXRlZ3lJZCksXHJcbiAgICAgICAgICAgIGNyZWF0ZURhdGUgOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICBwYXJhbXMgOiBwYXJhbXNcclxuICAgICAgICB9KTtcclxuICAgICAgICBsLmluZm8oYHVzZXJJZCA9ICR7dXNlcklkfSBjcmVhdGUgbW9jayB0cmFkZSA9ICR7bW9ja1RyYWRlfWApO1xyXG4gICAgICAgIHJldHVybiBtb2NrVHJhZGUuc2F2ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgTW9ja1RyYWRlU2VydmljZSgpOyJdfQ==