"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../common/logger"));

var _child_process = _interopRequireDefault(require("child_process"));

var _util = _interopRequireDefault(require("util"));

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var _querystring = _interopRequireDefault(require("querystring"));

var _zlib = require("zlib");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FireStoneRockService {
  constructor() {
    this.exec = _util.default.promisify(_child_process.default.exec);
    this.options = {
      'method': 'POST',
      'hostname': 'mncg.10jqka.com.cn',
      'path': '/cgiwt/delegate/qryChengjiao',
      'headers': {
        'Accept': ' application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': ' gzip, deflate, br',
        'Accept-Language': ' en,zh-CN;q=0.9,zh;q=0.8',
        'Connection': ' keep-alive',
        'Content-Length': ' 0',
        'Host': ' mncg.10jqka.com.cn',
        'Origin': ' https://mncg.10jqka.com.cn',
        'Referer': ' https://mncg.10jqka.com.cn/cgiwt/index/index',
        'Sec-Fetch-Dest': ' empty',
        'Sec-Fetch-Mode': ' cors',
        'Sec-Fetch-Site': ' same-origin',
        'User-Agent': ' Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'X-Requested-With': ' XMLHttpRequest',
        'sec-ch-ua': ' "Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        'sec-ch-ua-mobile': ' ?0',
        'sec-ch-ua-platform': ' "Windows"'
      }
    };
    this.dfcf_options = {
      'hostname': 'jy.xzsec.com',
      'port': 443,
      'method': 'POST',
      'headers': {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        'Referer': 'https://jy.xzsec.com/Trade/Sale',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Host': 'jy.xzsec.com',
        'Origin': 'https://jy.xzsec.com',
        'sec-ch-ua': '"Chromium";v="94", "Google Chrome";v="94", ";Not A Brand";v="99"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest'
      }
    };
  }

  async createNewFirerock(codes, tradeId, isMock) {
    let msg = `start the firestonerock service code=${codes}, tradeId=${tradeId}, isMock=${isMock}`;

    _logger.default.info(msg);

    if (process.env.ENABLE_FIREROCK === 'true') {
      let seconds = '"2,5,8,11,14,17,20,23,26,29,32,35,38,41,44,47,50,53,56,59"';

      if (codes[0] == 'N/A') {
        seconds = '3';
      }

      this.exec(`shell\\runfirerock ${tradeId} ${seconds} ${isMock}`);
      return new Promise((resolve, reject) => {
        resolve({
          'success': msg
        });
      });
    } else {
      return Promise.resolve({
        'success': msg,
        'message': 'FIREROCK is disable, ignore createNewFirerock'
      });
    }
  }

  async start_heart_beat(headers) {
    if (process.env.ENABLE_THS_HEART_BEAT === 'true') {
      Object.assign(this.options.headers, headers);
      return new Promise((resolve, reject) => {
        console.log(this.options);

        let req = _http.default.request(this.options, res => {
          var chunks = [];
          res.on('data', chunk => {
            chunks.push(chunk);
          });
          res.on("end", function (chunk) {
            let body = Buffer.concat(chunks);
            let result = body.toString();

            _logger.default.info(`send heart beat to ths get response = ${result}`);

            resolve(JSON.parse(result));
          });
          res.on("error", function (error) {
            _logger.default.error(`failed to parse the heart beat result = ${error}`);

            reject(error);
          });
        });

        req.on('error', e => {
          _logger.default.error(`send heart beat to ths error, e = ${e}`);

          reject(e);
        });
        req.end();
      });
    } else {
      return Promise.resolve({
        errorcode: 0,
        message: 'THS_HEART_BEAT is disable, ignore the heart beat'
      });
    }
  }

  async start_heart_beat_dfcf(headers, validatekey) {
    this.dfcf_options['path'] = '/Search/GetDealData?validatekey=' + validatekey;
    headers['gw_reqtimestamp'] = new Date().getTime();
    Object.assign(this.dfcf_options.headers, headers);
    return new Promise((resolve, reject) => {
      let req = _https.default.request(this.dfcf_options, res => {
        const encoding = res.headers['content-encoding'];
        let stream = res; // If the response is gzipped, create a gunzip stream

        if (encoding && encoding.includes('gzip')) {
          stream = res.pipe((0, _zlib.createGunzip)());
        }

        var chunks = [];
        stream.on('data', chunk => {
          chunks.push(chunk);
        });
        stream.on("end", function (chunk) {
          let body = Buffer.concat(chunks);
          let result = body.toString('utf-8');

          _logger.default.info(`send heart beat to dfcf get response = ${result}`);

          resolve(JSON.parse(result));
        });
        stream.on("error", function (error) {
          _logger.default.error(`failed to parse the heart beat result = ${error}`);

          reject(error);
        });
      });

      req.on('error', e => {
        _logger.default.error(`send heart beat to dfcf error, e = ${e}`);

        reject(e);
      });
      req.write(_querystring.default.stringify({
        'qqhs': '10',
        'dwc': ''
      }));
      req.end();
    });
  }

}

var _default = new FireStoneRockService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,