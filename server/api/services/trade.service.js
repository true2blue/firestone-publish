"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../common/logger"));

var _models = _interopRequireDefault(require("../models"));

var _Utils = _interopRequireDefault(require("../common/Utils"));

var _mongoose = _interopRequireDefault(require("mongoose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TradeService {
  async queryTradesByUser(accessToken) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    return _models.default.Trade.findByUserId(userId);
  }

  async queryHistoryTrades(accessToken, createdDate, code) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    return _models.default.Trade.findByUserIdAndDateAndCode(userId, createdDate, code);
  }

  async updateTrade(accessToken, tradeId, update) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    _logger.default.info(`userId = ${userId}, update tradeId = ${tradeId} with update = ${JSON.stringify(update)}`);

    return _models.default.Trade.findOneAndUpdate({
      userId: _mongoose.default.Types.ObjectId(userId),
      _id: _mongoose.default.Types.ObjectId(tradeId)
    }, update, {
      new: true
    });
  }

  async createTrade(accessToken, strategyId, params) {
    let userId = _Utils.default.getUserIdFromAccessToken(accessToken);

    let trade = new _models.default.Trade({
      code: params.code,
      userId: _mongoose.default.Types.ObjectId(userId),
      strategyId: _mongoose.default.Types.ObjectId(strategyId),
      createDate: Date.now(),
      params: params
    });

    _logger.default.info(`userId = ${userId} create trade = ${trade}`);

    return trade.save();
  }

}

var _default = new TradeService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hcGkvc2VydmljZXMvdHJhZGUuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJUcmFkZVNlcnZpY2UiLCJxdWVyeVRyYWRlc0J5VXNlciIsImFjY2Vzc1Rva2VuIiwidXNlcklkIiwiVXRpbHMiLCJnZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4iLCJtb2RlbHMiLCJUcmFkZSIsImZpbmRCeVVzZXJJZCIsInF1ZXJ5SGlzdG9yeVRyYWRlcyIsImNyZWF0ZWREYXRlIiwiY29kZSIsImZpbmRCeVVzZXJJZEFuZERhdGVBbmRDb2RlIiwidXBkYXRlVHJhZGUiLCJ0cmFkZUlkIiwidXBkYXRlIiwibCIsImluZm8iLCJKU09OIiwic3RyaW5naWZ5IiwiZmluZE9uZUFuZFVwZGF0ZSIsIm1vbmdvb3NlIiwiVHlwZXMiLCJPYmplY3RJZCIsIl9pZCIsIm5ldyIsImNyZWF0ZVRyYWRlIiwic3RyYXRlZ3lJZCIsInBhcmFtcyIsInRyYWRlIiwiY3JlYXRlRGF0ZSIsIkRhdGUiLCJub3ciLCJzYXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxZQUFOLENBQW1CO0FBRWYsUUFBTUMsaUJBQU4sQ0FBd0JDLFdBQXhCLEVBQW9DO0FBQ2hDLFFBQUlDLE1BQU0sR0FBR0MsZUFBTUMsd0JBQU4sQ0FBK0JILFdBQS9CLENBQWI7O0FBQ0EsV0FBT0ksZ0JBQU9DLEtBQVAsQ0FBYUMsWUFBYixDQUEwQkwsTUFBMUIsQ0FBUDtBQUNIOztBQUdELFFBQU1NLGtCQUFOLENBQXlCUCxXQUF6QixFQUFzQ1EsV0FBdEMsRUFBbURDLElBQW5ELEVBQXdEO0FBQ3BELFFBQUlSLE1BQU0sR0FBR0MsZUFBTUMsd0JBQU4sQ0FBK0JILFdBQS9CLENBQWI7O0FBQ0EsV0FBT0ksZ0JBQU9DLEtBQVAsQ0FBYUssMEJBQWIsQ0FBd0NULE1BQXhDLEVBQWdETyxXQUFoRCxFQUE2REMsSUFBN0QsQ0FBUDtBQUNIOztBQUdELFFBQU1FLFdBQU4sQ0FBa0JYLFdBQWxCLEVBQStCWSxPQUEvQixFQUF3Q0MsTUFBeEMsRUFBK0M7QUFDM0MsUUFBSVosTUFBTSxHQUFHQyxlQUFNQyx3QkFBTixDQUErQkgsV0FBL0IsQ0FBYjs7QUFDQWMsb0JBQUVDLElBQUYsQ0FBUSxZQUFXZCxNQUFPLHNCQUFxQlcsT0FBUSxrQkFBaUJJLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixNQUFmLENBQXVCLEVBQS9GOztBQUNBLFdBQU9ULGdCQUFPQyxLQUFQLENBQWFhLGdCQUFiLENBQThCO0FBQUNqQixNQUFBQSxNQUFNLEVBQUdrQixrQkFBU0MsS0FBVCxDQUFlQyxRQUFmLENBQXdCcEIsTUFBeEIsQ0FBVjtBQUEyQ3FCLE1BQUFBLEdBQUcsRUFBR0gsa0JBQVNDLEtBQVQsQ0FBZUMsUUFBZixDQUF3QlQsT0FBeEI7QUFBakQsS0FBOUIsRUFBa0hDLE1BQWxILEVBQTBIO0FBQUNVLE1BQUFBLEdBQUcsRUFBRztBQUFQLEtBQTFILENBQVA7QUFDSDs7QUFFRCxRQUFNQyxXQUFOLENBQWtCeEIsV0FBbEIsRUFBK0J5QixVQUEvQixFQUEyQ0MsTUFBM0MsRUFBa0Q7QUFDOUMsUUFBSXpCLE1BQU0sR0FBR0MsZUFBTUMsd0JBQU4sQ0FBK0JILFdBQS9CLENBQWI7O0FBQ0EsUUFBSTJCLEtBQUssR0FBRyxJQUFJdkIsZ0JBQU9DLEtBQVgsQ0FBaUI7QUFDekJJLE1BQUFBLElBQUksRUFBR2lCLE1BQU0sQ0FBQ2pCLElBRFc7QUFFekJSLE1BQUFBLE1BQU0sRUFBR2tCLGtCQUFTQyxLQUFULENBQWVDLFFBQWYsQ0FBd0JwQixNQUF4QixDQUZnQjtBQUd6QndCLE1BQUFBLFVBQVUsRUFBR04sa0JBQVNDLEtBQVQsQ0FBZUMsUUFBZixDQUF3QkksVUFBeEIsQ0FIWTtBQUl6QkcsTUFBQUEsVUFBVSxFQUFHQyxJQUFJLENBQUNDLEdBQUwsRUFKWTtBQUt6QkosTUFBQUEsTUFBTSxFQUFHQTtBQUxnQixLQUFqQixDQUFaOztBQU9BWixvQkFBRUMsSUFBRixDQUFRLFlBQVdkLE1BQU8sbUJBQWtCMEIsS0FBTSxFQUFsRDs7QUFDQSxXQUFPQSxLQUFLLENBQUNJLElBQU4sRUFBUDtBQUNIOztBQS9CYzs7ZUFrQ0osSUFBSWpDLFlBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsIGZyb20gJy4uLy4uL2NvbW1vbi9sb2dnZXInO1xyXG5pbXBvcnQgbW9kZWxzIGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi9jb21tb24vVXRpbHMnO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5cclxuY2xhc3MgVHJhZGVTZXJ2aWNlIHtcclxuXHJcbiAgICBhc3luYyBxdWVyeVRyYWRlc0J5VXNlcihhY2Nlc3NUb2tlbil7XHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IFV0aWxzLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgcmV0dXJuIG1vZGVscy5UcmFkZS5maW5kQnlVc2VySWQodXNlcklkKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgcXVlcnlIaXN0b3J5VHJhZGVzKGFjY2Vzc1Rva2VuLCBjcmVhdGVkRGF0ZSwgY29kZSl7XHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IFV0aWxzLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgcmV0dXJuIG1vZGVscy5UcmFkZS5maW5kQnlVc2VySWRBbmREYXRlQW5kQ29kZSh1c2VySWQsIGNyZWF0ZWREYXRlLCBjb2RlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgdXBkYXRlVHJhZGUoYWNjZXNzVG9rZW4sIHRyYWRlSWQsIHVwZGF0ZSl7XHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IFV0aWxzLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgbC5pbmZvKGB1c2VySWQgPSAke3VzZXJJZH0sIHVwZGF0ZSB0cmFkZUlkID0gJHt0cmFkZUlkfSB3aXRoIHVwZGF0ZSA9ICR7SlNPTi5zdHJpbmdpZnkodXBkYXRlKX1gKTtcclxuICAgICAgICByZXR1cm4gbW9kZWxzLlRyYWRlLmZpbmRPbmVBbmRVcGRhdGUoe3VzZXJJZCA6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkKHVzZXJJZCksIF9pZCA6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkKHRyYWRlSWQpfSwgdXBkYXRlLCB7bmV3IDogdHJ1ZX0pXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY3JlYXRlVHJhZGUoYWNjZXNzVG9rZW4sIHN0cmF0ZWd5SWQsIHBhcmFtcyl7XHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IFV0aWxzLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgbGV0IHRyYWRlID0gbmV3IG1vZGVscy5UcmFkZSh7XHJcbiAgICAgICAgICAgIGNvZGUgOiBwYXJhbXMuY29kZSxcclxuICAgICAgICAgICAgdXNlcklkIDogbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQodXNlcklkKSxcclxuICAgICAgICAgICAgc3RyYXRlZ3lJZCA6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkKHN0cmF0ZWd5SWQpLFxyXG4gICAgICAgICAgICBjcmVhdGVEYXRlIDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgcGFyYW1zIDogcGFyYW1zXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbC5pbmZvKGB1c2VySWQgPSAke3VzZXJJZH0gY3JlYXRlIHRyYWRlID0gJHt0cmFkZX1gKTtcclxuICAgICAgICByZXR1cm4gdHJhZGUuc2F2ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgVHJhZGVTZXJ2aWNlKCk7Il19