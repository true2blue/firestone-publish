"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../common/logger"));

var _models = _interopRequireDefault(require("../models"));

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class UsersService {
  login(username, password) {
    password = _crypto.default.createHash('md5').update(password).digest("hex");

    _logger.default.info(`${this.constructor.name}.login(${username},${password})`);

    return new Promise((resolve, reject) => {
      _models.default.User.findByLogin(username, password).then(r => {
        if (r) {
          return this.generateAccessToken().then(res => {
            _logger.default.info(`user ${username}, login success: id = ${r._id}, access_token = ${res}`);

            r.access_token = res;
            r.expired_date = new Date(Date.now() + 24 * 3600 * 1000);
            r.save().then(() => {
              resolve({
                id: r._id,
                access_token: Buffer.from(r._id + ':' + res).toString('base64'),
                expired_date: r.expired_date
              });
            });
          });
        } else {
          _logger.default.warn(`user ${username} login failed`);

          resolve(null);
        }
      });
    });
  }

  async generateAccessToken() {
    return new Promise((resolve, reject) => {
      _crypto.default.randomBytes(32, (err, buffer) => {
        if (err) {
          reject(err);
        } else {
          resolve(buffer.toString('hex'));
        }
      });
    });
  }

  async auth(access_token) {
    let buff = new Buffer(access_token, 'base64');
    let text = buff.toString('utf-8');
    let id = text.split(':')[0];
    let token = text.split(':')[1];
    return new Promise((resolve, reject) => {
      _models.default.User.findById(id).then(r => {
        if (r && r.access_token == token && Date.now() < r.expired_date) {
          _logger.default.info(`user auth success: id = ${id}, access_token = ${token}`);

          resolve(r);
        } else {
          _logger.default.warn(`user auth error: id = ${id}, access_token = ${token}`);

          resolve(null);
        }
      });
    });
  }

}

var _default = new UsersService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hcGkvc2VydmljZXMvdXNlcnMuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJVc2Vyc1NlcnZpY2UiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwibCIsImluZm8iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm1vZGVscyIsIlVzZXIiLCJmaW5kQnlMb2dpbiIsInRoZW4iLCJyIiwiZ2VuZXJhdGVBY2Nlc3NUb2tlbiIsInJlcyIsIl9pZCIsImFjY2Vzc190b2tlbiIsImV4cGlyZWRfZGF0ZSIsIkRhdGUiLCJub3ciLCJzYXZlIiwiaWQiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJ3YXJuIiwicmFuZG9tQnl0ZXMiLCJlcnIiLCJidWZmZXIiLCJhdXRoIiwiYnVmZiIsInRleHQiLCJzcGxpdCIsInRva2VuIiwiZmluZEJ5SWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLFlBQU4sQ0FBbUI7QUFDZkMsRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVdDLFFBQVgsRUFBcUI7QUFDdEJBLElBQUFBLFFBQVEsR0FBR0MsZ0JBQU9DLFVBQVAsQ0FBa0IsS0FBbEIsRUFBeUJDLE1BQXpCLENBQWdDSCxRQUFoQyxFQUEwQ0ksTUFBMUMsQ0FBaUQsS0FBakQsQ0FBWDs7QUFDQUMsb0JBQUVDLElBQUYsQ0FBUSxHQUFFLEtBQUtDLFdBQUwsQ0FBaUJDLElBQUssVUFBU1QsUUFBUyxJQUFHQyxRQUFTLEdBQTlEOztBQUNBLFdBQU8sSUFBSVMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQ0Msc0JBQU9DLElBQVAsQ0FBWUMsV0FBWixDQUF3QmYsUUFBeEIsRUFBa0NDLFFBQWxDLEVBQTRDZSxJQUE1QyxDQUFpREMsQ0FBQyxJQUFJ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SUFBSWIsWUFBSixFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGwgZnJvbSAnLi4vLi4vY29tbW9uL2xvZ2dlcic7XHJcbmltcG9ydCBtb2RlbHMgZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xyXG5cclxuY2xhc3MgVXNlcnNTZXJ2aWNlIHtcclxuICAgIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICAgIHBhc3N3b3JkID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShwYXNzd29yZCkuZGlnZXN0KFwiaGV4XCIpO1xyXG4gICAgICAgIGwuaW5mbyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmxvZ2luKCR7dXNlcm5hbWV9LCR7cGFzc3dvcmR9KWApO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGVscy5Vc2VyLmZpbmRCeUxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkudGhlbihyID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVBY2Nlc3NUb2tlbigpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbC5pbmZvKGB1c2VyICR7dXNlcm5hbWV9LCBsb2dpbiBzdWNjZXNzOiBpZCA9ICR7ci5faWR9LCBhY2Nlc3NfdG9rZW4gPSAke3Jlc31gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5hY2Nlc3NfdG9rZW4gPSByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuZXhwaXJlZF9kYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDI0ICogMzYwMCAqIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByLnNhdmUoKS50aGVuKCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogci5faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiBCdWZmZXIuZnJvbShyLl9pZCArICc6JyArIHJlcykudG9TdHJpbmcoJ2Jhc2U2NCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyZWRfZGF0ZTogci5leHBpcmVkX2RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGwud2FybihgdXNlciAke3VzZXJuYW1lfSBsb2dpbiBmYWlsZWRgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZW5lcmF0ZUFjY2Vzc1Rva2VuKCl7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XHJcbiAgICAgICAgICAgIGNyeXB0by5yYW5kb21CeXRlcygzMiwgKGVyciwgYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYnVmZmVyLnRvU3RyaW5nKCdoZXgnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhdXRoKGFjY2Vzc190b2tlbil7XHJcbiAgICAgICAgbGV0IGJ1ZmYgPSBuZXcgQnVmZmVyKGFjY2Vzc190b2tlbiwgJ2Jhc2U2NCcpO1xyXG4gICAgICAgIGxldCB0ZXh0ID0gYnVmZi50b1N0cmluZygndXRmLTgnKTtcclxuICAgICAgICBsZXQgaWQgPSB0ZXh0LnNwbGl0KCc6JylbMF07XHJcbiAgICAgICAgbGV0IHRva2VuID0gdGV4dC5zcGxpdCgnOicpWzFdO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGVscy5Vc2VyLmZpbmRCeUlkKGlkKS50aGVuKHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYociAmJiByLmFjY2Vzc190b2tlbiA9PSB0b2tlbiAmJiBEYXRlLm5vdygpIDwgci5leHBpcmVkX2RhdGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGwuaW5mbyhgdXNlciBhdXRoIHN1Y2Nlc3M6IGlkID0gJHtpZH0sIGFjY2Vzc190b2tlbiA9ICR7dG9rZW59YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBsLndhcm4oYHVzZXIgYXV0aCBlcnJvcjogaWQgPSAke2lkfSwgYWNjZXNzX3Rva2VuID0gJHt0b2tlbn1gKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgVXNlcnNTZXJ2aWNlKCk7Il19