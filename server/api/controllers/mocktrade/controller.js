"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MockTradeController = void 0;

var _mocktrade = _interopRequireDefault(require("../../services/mocktrade.service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MockTradeController {
  queryUserMockTrades(req, res) {
    _mocktrade.default.queryMockTradesByUser(req.params.accesstoken).then(r => {
      r ? res.json(r) : res.json([]);
    }, err => {
      res.json({
        "error": err ? err.toString() : 'failed to query mock trades'
      });
    });
  }

  queryHistoryMockTrades(req, res) {
    _mocktrade.default.queryHistoryMockTrades(req.body.accesstoken, req.body.createdDate, req.body.code).then(r => {
      r ? res.json(r) : res.json([]);
    }, err => {
      res.json({
        "error": err ? err.toString() : 'failed to query history mock trades'
      });
    });
  }

  updateMockTrade(req, res) {
    _mocktrade.default.updateMockTrade(req.body.accesstoken, req.body.mocktradeid, req.body.update).then(r => {
      r ? res.json(r) : res.json({});
    }, err => {
      res.json({
        "error": err ? err.toString() : 'failed to update mock trade'
      });
    });
  }

  createMockTrade(req, res) {
    _mocktrade.default.createMockTrade(req.body.accesstoken, req.body.strategyId, req.body.params).then(r => {
      r ? res.json(r) : res.json({});
    }, err => {
      res.json({
        "error": err ? err.toString() : 'failed to create mock trade'
      });
    });
  }

}

exports.MockTradeController = MockTradeController;

var _default = new MockTradeController();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvY29udHJvbGxlcnMvbW9ja3RyYWRlL2NvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiTW9ja1RyYWRlQ29udHJvbGxlciIsInF1ZXJ5VXNlck1vY2tUcmFkZXMiLCJyZXEiLCJyZXMiLCJtb2NrVHJhZGVTZXJ2aWNlIiwicXVlcnlNb2NrVHJhZGVzQnlVc2VyIiwicGFyYW1zIiwiYWNjZXNzdG9rZW4iLCJ0aGVuIiwiciIsImpzb24iLCJlcnIiLCJ0b1N0cmluZyIsInF1ZXJ5SGlzdG9yeU1vY2tUcmFkZXMiLCJib2R5IiwiY3JlYXRlZERhdGUiLCJjb2RlIiwidXBkYXRlTW9ja1RyYWRlIiwibW9ja3RyYWRlaWQiLCJ1cGRhdGUiLCJjcmVhdGVNb2NrVHJhZGUiLCJzdHJhdGVneUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFTyxNQUFNQSxtQkFBTixDQUF5QjtBQUU1QkMsRUFBQUEsbUJBQW1CLENBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFVO0FBQ3pCQyx1QkFBaUJDLHFCQUFqQixDQUF1Q0gsR0FBRyxDQUFDSSxNQUFKLENBQVdDLFdBQWxELEVBQStEQyxJQUEvRCxDQUFvRUMsQ0FBQyxJQUFJO0FBQ3JFQSxNQUFBQSxDQUFDLEdBQUdOLEdBQUcsQ0FBQ08sSUFBSixDQUFTRCxDQUFULENBQUgsR0FBaUJOLEdBQUcsQ0FBQ08sSUFBSixDQUFTLEVBQVQsQ0FBbEI7QUFDSCxLQUZELEVBRUdDLEdBQUcsSUFBSTtBQUNOUixNQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBUztBQUFDLGlCQUFVQyxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0MsUUFBSixFQUFILEdBQW9CO0FBQWxDLE9BQVQ7QUFDSCxLQUpEO0FBS0g7O0FBRURDLEVBQUFBLHNCQUFzQixDQUFDWCxHQUFELEVBQU1DLEdBQU4sRUFBVTtBQUM1QkMsdUJBQWlCUyxzQkFBakIsQ0FBd0NYLEdBQUcsQ0FBQ1ksSUFBSixDQUFTUCxXQUFqRCxFQUE4REwsR0FBRyxDQUFDWSxJQUFKLENBQVNDLFdBQXZFLEVBQW9GYixHQUFHLENBQUNZLElBQUosQ0FBU0UsSUFBN0YsRUFBbUdSLElBQW5HLENBQXdHQyxDQUFDLElBQUk7QUFDekdBLE1BQUFBLENBQUMsR0FBR04sR0FBRyxDQUFDTyxJQUFKLENBQVNELENBQVQsQ0FBSCxHQUFpQk4sR0FBRyxDQUFDTyxJQUFKLENBQVMsRUFBVCxDQUFsQjtBQUNILEtBRkQsRUFFR0MsR0FBRyxJQUFJO0FBQ05SLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTO0FBQUMsaUJBQVVDLEdBQUcsR0FBR0EsR0FBRyxDQUFDQyxRQUFKLEVBQUgsR0FBb0I7QUFBbEMsT0FBVDtBQUNILEtBSkQ7QUFLSDs7QUFFREssRUFBQUEsZUFBZSxDQUFDZixHQUFELEVBQU1DLEdBQU4sRUFBVTtBQUNyQkMsdUJBQWlCYSxlQUFqQixDQUFpQ2YsR0FBRyxDQUFDWSxJQUFKLENBQVNQLFdBQTFDLEVBQXVETCxHQUFHLENBQUNZLElBQUosQ0FBU0ksV0FBaEUsRUFBNkVoQixHQUFHLENBQUNZLElBQUosQ0FBU0ssTUFBdEYsRUFBOEZYLElBQTlGLENBQW1HQyxDQUFDLElBQUk7QUFDcEdBLE1BQUFBLENBQUMsR0FBR04sR0FBRyxDQUFDTyxJQUFKLENBQVNELENBQVQsQ0FBSCxHQUFpQk4sR0FBRyxDQUFDTyxJQUFKLENBQVMsRUFBVCxDQUFsQjtBQUNILEtBRkQsRUFFR0MsR0FBRyxJQUFJO0FBQ05SLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTO0FBQUMsaUJBQVVDLEdBQUcsR0FBR0EsR0FBRyxDQUFDQyxRQUFKLEVBQUgsR0FBb0I7QUFBbEMsT0FBVDtBQUNILEtBSkQ7QUFLSDs7QUFFRFEsRUFBQUEsZUFBZSxDQUFDbEIsR0FBRCxFQUFNQyxHQUFOLEVBQVU7QUFDckJDLHVCQUFpQmdCLGVBQWpCLENBQWlDbEIsR0FBRyxDQUFDWSxJQUFKLENBQVNQLFdBQTFDLEVBQXVETCxHQUFHLENBQUNZLElBQUosQ0FBU08sVUFBaEUsRUFBNEVuQixHQUFHLENBQUNZLElBQUosQ0FBU1IsTUFBckYsRUFBNkZFLElBQTdGLENBQWtHQyxDQUFDLElBQUk7QUFDbkdBLE1BQUFBLENBQUMsR0FBR04sR0FBRyxDQUFDTyxJQUFKLENBQVNELENBQVQsQ0FBSCxHQUFpQk4sR0FBRyxDQUFDTyxJQUFKLENBQVMsRUFBVCxDQUFsQjtBQUNILEtBRkQsRUFFR0MsR0FBRyxJQUFJO0FBQ05SLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTO0FBQUMsaUJBQVVDLEdBQUcsR0FBR0EsR0FBRyxDQUFDQyxRQUFKLEVBQUgsR0FBb0I7QUFBbEMsT0FBVDtBQUNILEtBSkQ7QUFLSDs7QUFoQzJCOzs7O2VBbUNqQixJQUFJWixtQkFBSixFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vY2tUcmFkZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvbW9ja3RyYWRlLnNlcnZpY2UnXHJcblxyXG5leHBvcnQgY2xhc3MgTW9ja1RyYWRlQ29udHJvbGxlcntcclxuXHJcbiAgICBxdWVyeVVzZXJNb2NrVHJhZGVzKHJlcSwgcmVzKXtcclxuICAgICAgICBtb2NrVHJhZGVTZXJ2aWNlLnF1ZXJ5TW9ja1RyYWRlc0J5VXNlcihyZXEucGFyYW1zLmFjY2Vzc3Rva2VuKS50aGVuKHIgPT4ge1xyXG4gICAgICAgICAgICByID8gcmVzLmpzb24ocikgOiByZXMuanNvbihbXSk7XHJcbiAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgcmVzLmpzb24oe1wiZXJyb3JcIiA6IGVyciA/IGVyci50b1N0cmluZygpIDogJ2ZhaWxlZCB0byBxdWVyeSBtb2NrIHRyYWRlcyd9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeUhpc3RvcnlNb2NrVHJhZGVzKHJlcSwgcmVzKXtcclxuICAgICAgICBtb2NrVHJhZGVTZXJ2aWNlLnF1ZXJ5SGlzdG9yeU1vY2tUcmFkZXMocmVxLmJvZHkuYWNjZXNzdG9rZW4sIHJlcS5ib2R5LmNyZWF0ZWREYXRlLCByZXEuYm9keS5jb2RlKS50aGVuKHIgPT4ge1xyXG4gICAgICAgICAgICByID8gcmVzLmpzb24ocikgOiByZXMuanNvbihbXSk7XHJcbiAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgcmVzLmpzb24oe1wiZXJyb3JcIiA6IGVyciA/IGVyci50b1N0cmluZygpIDogJ2ZhaWxlZCB0byBxdWVyeSBoaXN0b3J5IG1vY2sgdHJhZGVzJ30pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZU1vY2tUcmFkZShyZXEsIHJlcyl7XHJcbiAgICAgICAgbW9ja1RyYWRlU2VydmljZS51cGRhdGVNb2NrVHJhZGUocmVxLmJvZHkuYWNjZXNzdG9rZW4sIHJlcS5ib2R5Lm1vY2t0cmFkZWlkLCByZXEuYm9keS51cGRhdGUpLnRoZW4ociA9PiB7XHJcbiAgICAgICAgICAgIHIgPyByZXMuanNvbihyKSA6IHJlcy5qc29uKHt9KTtcclxuICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICByZXMuanNvbih7XCJlcnJvclwiIDogZXJyID8gZXJyLnRvU3RyaW5nKCkgOiAnZmFpbGVkIHRvIHVwZGF0ZSBtb2NrIHRyYWRlJ30pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1vY2tUcmFkZShyZXEsIHJlcyl7XHJcbiAgICAgICAgbW9ja1RyYWRlU2VydmljZS5jcmVhdGVNb2NrVHJhZGUocmVxLmJvZHkuYWNjZXNzdG9rZW4sIHJlcS5ib2R5LnN0cmF0ZWd5SWQsIHJlcS5ib2R5LnBhcmFtcykudGhlbihyID0+IHtcclxuICAgICAgICAgICAgciA/IHJlcy5qc29uKHIpIDogcmVzLmpzb24oe30pO1xyXG4gICAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgICAgIHJlcy5qc29uKHtcImVycm9yXCIgOiBlcnIgPyBlcnIudG9TdHJpbmcoKSA6ICdmYWlsZWQgdG8gY3JlYXRlIG1vY2sgdHJhZGUnfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBNb2NrVHJhZGVDb250cm9sbGVyKCkiXX0=