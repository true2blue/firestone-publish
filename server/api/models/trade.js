"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = _interopRequireDefault(require("mongoose"));

var _logger = _interopRequireDefault(require("../../common/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const tradeSchema = new _mongoose.default.Schema({
  code: {
    type: String
  },
  state: {
    type: String,
    default: '未开始'
  },
  result: {
    type: String,
    default: '无'
  },
  userId: {
    type: _mongoose.default.Schema.Types.ObjectId
  },
  strategyId: {
    type: _mongoose.default.Schema.Types.ObjectId,
    ref: 'Strategy'
  },
  deleted: {
    type: Boolean,
    default: false
  },
  createDate: {
    type: Date
  },
  params: {
    type: Object
  },
  order: {
    type: Object
  }
});

tradeSchema.statics.findByUserId = async function (userId) {
  _logger.default.info(`find the trade of user ${userId}`);

  let now = new Date();
  let startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  let startOfTodayStr = `${now.getFullYear()}-${('0' + (now.getMonth() + 1)).slice(-2)}-${('0' + now.getDate()).slice(-2)}`;
  return this.find({
    userId: _mongoose.default.Types.ObjectId(userId),
    $or: [{
      createDate: {
        $gte: startOfToday
      }
    }, {
      'params.executeDate': {
        $gte: startOfTodayStr
      }
    }],
    deleted: false
  }).sort({
    createDate: -1
  }).populate('strategyId');
};

tradeSchema.statics.findByUserIdAndDateAndCode = async function (userId, createdDate, code) {
  _logger.default.info(`find history trade of user ${userId}, createDate = ${createdDate}, code = ${code}`);

  let startDate = new Date(createdDate);
  let endDate = new Date(createdDate);
  endDate.setDate(startDate.getDate() + 1);
  let cond = {
    userId: _mongoose.default.Types.ObjectId(userId),
    createDate: {
      $gte: startDate,
      $lt: endDate
    },
    deleted: false
  };

  if (code != null && code.length > 0) {
    cond.code = code;
  }

  return this.find(cond).populate('strategyId');
};

const trade = _mongoose.default.model('Trade', tradeSchema);

var _default = trade;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hcGkvbW9kZWxzL3RyYWRlLmpzIl0sIm5hbWVzIjpbInRyYWRlU2NoZW1hIiwibW9uZ29vc2UiLCJTY2hlbWEiLCJjb2RlIiwidHlwZSIsIlN0cmluZyIsInN0YXRlIiwiZGVmYXVsdCIsInJlc3VsdCIsInVzZXJJZCIsIlR5cGVzIiwiT2JqZWN0SWQiLCJzdHJhdGVneUlkIiwicmVmIiwiZGVsZXRlZCIsIkJvb2xlYW4iLCJjcmVhdGVEYXRlIiwiRGF0ZSIsInBhcmFtcyIsIk9iamVjdCIsIm9yZGVyIiwic3RhdGljcyIsImZpbmRCeVVzZXJJZCIsImwiLCJpbmZvIiwibm93Iiwic3RhcnRPZlRvZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJzdGFydE9mVG9kYXlTdHIiLCJzbGljZSIsImZpbmQiLCIkb3IiLCIkZ3RlIiwic29ydCIsInBvcHVsYXRlIiwiZmluZEJ5VXNlcklkQW5kRGF0ZUFuZENvZGUiLCJjcmVhdGVkRGF0ZSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJzZXREYXRlIiwiY29uZCIsIiRsdCIsImxlbmd0aCIsInRyYWRlIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFdBQVcsR0FBRyxJQUFJQyxrQkFBU0MsTUFBYixDQUFvQjtBQUNwQ0MsRUFBQUEsSUFBSSxFQUFHO0FBQ0hDLElBQUFBLElBQUksRUFBRUM7QUFESCxHQUQ2QjtBQUlwQ0MsRUFBQUEsS0FBSyxFQUFHO0FBQ0pGLElBQUFBLElBQUksRUFBRUMsTUFERjtBQUVKRSxJQUFBQSxPQUFPLEVBQUU7QUFGTCxHQUo0QjtBQVFwQ0MsRUFBQUEsTUFBTSxFQUFHO0FBQ0xKLElBQUFBLElBQUksRUFBRUMsTUFERDtBQUVMRSxJQUFBQSxPQUFPLEVBQUU7QUFGSixHQVIyQjtBQVlwQ0UsRUFBQUEsTUFBTSxFQUFFO0FBQ0pMLElBQUFBLElBQUksRUFBRUgsa0JBQVNDLE1BQVQs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RUFBRTtBQUhGLEdBQVg7O0FBS0EsTUFBR1gsSUFBSSxJQUFJLElBQVIsSUFBZ0JBLElBQUksQ0FBQ3lDLE1BQUwsR0FBYyxDQUFqQyxFQUFtQztBQUMvQkYsSUFBQUEsSUFBSSxDQUFDdkMsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7O0FBQ0QsU0FBTyxLQUFLNkIsSUFBTCxDQUFVVSxJQUFWLEVBQWdCTixRQUFoQixDQUF5QixZQUF6QixDQUFQO0FBQ0gsQ0FkRDs7QUFpQkEsTUFBTVMsS0FBSyxHQUFHNUMsa0JBQVM2QyxLQUFULENBQWUsT0FBZixFQUF3QjlDLFdBQXhCLENBQWQ7O2VBRWU2QyxLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xyXG5pbXBvcnQgbCBmcm9tICcuLi8uLi9jb21tb24vbG9nZ2VyJztcclxuXHJcbmNvbnN0IHRyYWRlU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBjb2RlIDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZ1xyXG4gICAgfSxcclxuICAgIHN0YXRlIDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICBkZWZhdWx0OiAn5pyq5byA5aeLJ1xyXG4gICAgfSxcclxuICAgIHJlc3VsdCA6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgZGVmYXVsdDogJ+aXoCdcclxuICAgIH0sXHJcbiAgICB1c2VySWQ6IHtcclxuICAgICAgICB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWRcclxuICAgIH0sXHJcbiAgICBzdHJhdGVneUlkOiB7XHJcbiAgICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogJ1N0cmF0ZWd5J1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZWQ6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgY3JlYXRlRGF0ZToge1xyXG4gICAgICAgIHR5cGU6IERhdGVcclxuICAgIH0sXHJcbiAgICBwYXJhbXMgOiB7XHJcbiAgICAgICAgdHlwZTogT2JqZWN0XHJcbiAgICB9LFxyXG4gICAgb3JkZXIgOiB7XHJcbiAgICAgICAgdHlwZTogT2JqZWN0XHJcbiAgICB9XHJcbn0pO1xyXG5cclxudHJhZGVTY2hlbWEuc3RhdGljcy5maW5kQnlVc2VySWQgPSBhc3luYyBmdW5jdGlvbiAodXNlcklkKSB7XHJcbiAgICBsLmluZm8oYGZpbmQgdGhlIHRyYWRlIG9mIHVzZXIgJHt1c2VySWR9YCk7XHJcbiAgICBsZXQgbm93ID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBzdGFydE9mVG9kYXkgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIG5vdy5nZXREYXRlKCkpO1xyXG4gICAgbGV0IHN0YXJ0T2ZUb2RheVN0ciA9IGAke25vdy5nZXRGdWxsWWVhcigpfS0keygnMCcgKyAobm93LmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpfS0keygnMCcgKyBub3cuZ2V0RGF0ZSgpKS5zbGljZSgtMil9YDtcclxuICAgIHJldHVybiB0aGlzLmZpbmQoe1xyXG4gICAgICAgIHVzZXJJZDogbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQodXNlcklkKSxcclxuICAgICAgICAkb3I6IFt7Y3JlYXRlRGF0ZTogeyRndGU6IHN0YXJ0T2ZUb2RheX19LCB7J3BhcmFtcy5leGVjdXRlRGF0ZSc6IHskZ3RlOiBzdGFydE9mVG9kYXlTdHJ9fV0sXHJcbiAgICAgICAgZGVsZXRlZDogZmFsc2VcclxuICAgIH0pLnNvcnQoe2NyZWF0ZURhdGUgOiAtMX0pLnBvcHVsYXRlKCdzdHJhdGVneUlkJyk7XHJcbn1cclxuXHJcbnRyYWRlU2NoZW1hLnN0YXRpY3MuZmluZEJ5VXNlcklkQW5kRGF0ZUFuZENvZGUgPSBhc3luYyBmdW5jdGlvbih1c2VySWQsIGNyZWF0ZWREYXRlLCBjb2RlKXtcclxuICAgIGwuaW5mbyhgZmluZCBoaXN0b3J5IHRyYWRlIG9mIHVzZXIgJHt1c2VySWR9LCBjcmVhdGVEYXRlID0gJHtjcmVhdGVkRGF0ZX0sIGNvZGUgPSAke2NvZGV9YCk7XHJcbiAgICBsZXQgc3RhcnREYXRlID0gbmV3IERhdGUoY3JlYXRlZERhdGUpO1xyXG4gICAgbGV0IGVuZERhdGUgPSBuZXcgRGF0ZShjcmVhdGVkRGF0ZSk7XHJcbiAgICBlbmREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSArIDEpO1xyXG4gICAgbGV0IGNvbmQgPSB7XHJcbiAgICAgICAgdXNlcklkOiBtb25nb29zZS5UeXBlcy5PYmplY3RJZCh1c2VySWQpLFxyXG4gICAgICAgIGNyZWF0ZURhdGUgOiB7JGd0ZTogc3RhcnREYXRlLCAkbHQ6IGVuZERhdGV9LFxyXG4gICAgICAgIGRlbGV0ZWQ6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgaWYoY29kZSAhPSBudWxsICYmIGNvZGUubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgY29uZC5jb2RlID0gY29kZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmZpbmQoY29uZCkucG9wdWxhdGUoJ3N0cmF0ZWd5SWQnKTtcclxufVxyXG5cclxuXHJcbmNvbnN0IHRyYWRlID0gbW9uZ29vc2UubW9kZWwoJ1RyYWRlJywgdHJhZGVTY2hlbWEpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdHJhZGU7Il19