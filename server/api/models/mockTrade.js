"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = _interopRequireDefault(require("mongoose"));

var _logger = _interopRequireDefault(require("../../common/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mockTradeSchema = new _mongoose.default.Schema({
  code: {
    type: String
  },
  state: {
    type: String,
    default: '未开始'
  },
  result: {
    type: String,
    default: '无'
  },
  userId: {
    type: _mongoose.default.Schema.Types.ObjectId
  },
  strategyId: {
    type: _mongoose.default.Schema.Types.ObjectId,
    ref: 'Strategy'
  },
  deleted: {
    type: Boolean,
    default: false
  },
  createDate: {
    type: Date
  },
  params: {
    type: Object
  },
  order: {
    type: Object
  }
});

mockTradeSchema.statics.findByUserId = async function (userId) {
  _logger.default.info(`find the mockTrade of user ${userId}`);

  let now = new Date();
  let startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  let startOfTodayStr = `${now.getFullYear()}-${('0' + (now.getMonth() + 1)).slice(-2)}-${('0' + now.getDate()).slice(-2)}`;
  return this.find({
    userId: _mongoose.default.Types.ObjectId(userId),
    $or: [{
      createDate: {
        $gte: startOfToday
      }
    }, {
      'params.executeDate': {
        $gte: startOfTodayStr
      }
    }],
    deleted: false
  }).sort({
    createDate: -1
  }).populate('strategyId');
};

mockTradeSchema.statics.findByUserIdAndDateAndCode = async function (userId, createdDate, code) {
  _logger.default.info(`find history mockTrade of user ${userId}, createDate = ${createdDate}, code = ${code}`);

  let startDate = new Date(createdDate);
  let endDate = new Date(createdDate);
  endDate.setDate(startDate.getDate() + 1);
  let cond = {
    userId: _mongoose.default.Types.ObjectId(userId),
    createDate: {
      $gte: startDate,
      $lt: endDate
    },
    deleted: false
  };

  if (code != null && code.length > 0) {
    cond.code = code;
  }

  return this.find(cond).populate('strategyId');
};

const mockTrade = _mongoose.default.model('MockTrade', mockTradeSchema);

var _default = mockTrade;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hcGkvbW9kZWxzL21vY2tUcmFkZS5qcyJdLCJuYW1lcyI6WyJtb2NrVHJhZGVTY2hlbWEiLCJtb25nb29zZSIsIlNjaGVtYSIsImNvZGUiLCJ0eXBlIiwiU3RyaW5nIiwic3RhdGUiLCJkZWZhdWx0IiwicmVzdWx0IiwidXNlcklkIiwiVHlwZXMiLCJPYmplY3RJZCIsInN0cmF0ZWd5SWQiLCJyZWYiLCJkZWxldGVkIiwiQm9vbGVhbiIsImNyZWF0ZURhdGUiLCJEYXRlIiwicGFyYW1zIiwiT2JqZWN0Iiwib3JkZXIiLCJzdGF0aWNzIiwiZmluZEJ5VXNlcklkIiwibCIsImluZm8iLCJub3ciLCJzdGFydE9mVG9kYXkiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInN0YXJ0T2ZUb2RheVN0ciIsInNsaWNlIiwiZmluZCIsIiRvciIsIiRndGUiLCJzb3J0IiwicG9wdWxhdGUiLCJmaW5kQnlVc2VySWRBbmREYXRlQW5kQ29kZSIsImNyZWF0ZWREYXRlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInNldERhdGUiLCJjb25kIiwiJGx0IiwibGVuZ3RoIiwibW9ja1RyYWRlIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLGVBQWUsR0FBRyxJQUFJQyxrQkFBU0MsTUFBYixDQUFvQjtBQUN4Q0MsRUFBQUEsSUFBSSxFQUFHO0FBQ0hDLElBQUFBLElBQUksRUFBRUM7QUFESCxHQURpQztBQUl4Q0MsRUFBQUEsS0FBSyxFQUFHO0FBQ0pGLElBQUFBLElBQUksRUFBRUMsTUFERjtBQUVKRSxJQUFBQSxPQUFPLEVBQUU7QUFGTCxHQUpnQztBQVF4Q0MsRUFBQUEsTUFBTSxFQUFHO0FBQ0xKLElBQUFBLElBQUksRUFBRUMsTUFERDtBQUVMRSxJQUFBQSxPQUFPLEVBQUU7QUFGSixHQVIrQjtBQVl4Q0UsRUFBQUEsTUFBTSxFQUFFO0FBQ0pMLElBQUFBLElBQUksRUFBRUgs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MUIsSUFBQUEsT0FBTyxFQUFFO0FBSEYsR0FBWDs7QUFLQSxNQUFHWCxJQUFJLElBQUksSUFBUixJQUFnQkEsSUFBSSxDQUFDeUMsTUFBTCxHQUFjLENBQWpDLEVBQW1DO0FBQy9CRixJQUFBQSxJQUFJLENBQUN2QyxJQUFMLEdBQVlBLElBQVo7QUFDSDs7QUFDRCxTQUFPLEtBQUs2QixJQUFMLENBQVVVLElBQVYsRUFBZ0JOLFFBQWhCLENBQXlCLFlBQXpCLENBQVA7QUFDSCxDQWREOztBQWlCQSxNQUFNUyxTQUFTLEdBQUc1QyxrQkFBUzZDLEtBQVQsQ0FBZSxXQUFmLEVBQTRCOUMsZUFBNUIsQ0FBbEI7O2VBRWU2QyxTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xyXG5pbXBvcnQgbCBmcm9tICcuLi8uLi9jb21tb24vbG9nZ2VyJztcclxuXHJcbmNvbnN0IG1vY2tUcmFkZVNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgY29kZSA6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmdcclxuICAgIH0sXHJcbiAgICBzdGF0ZSA6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgZGVmYXVsdDogJ+acquW8gOWniydcclxuICAgIH0sXHJcbiAgICByZXN1bHQgOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIGRlZmF1bHQ6ICfml6AnXHJcbiAgICB9LFxyXG4gICAgdXNlcklkOiB7XHJcbiAgICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkXHJcbiAgICB9LFxyXG4gICAgc3RyYXRlZ3lJZDoge1xyXG4gICAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6ICdTdHJhdGVneSdcclxuICAgIH0sXHJcbiAgICBkZWxldGVkOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZURhdGU6IHtcclxuICAgICAgICB0eXBlOiBEYXRlXHJcbiAgICB9LFxyXG4gICAgcGFyYW1zIDoge1xyXG4gICAgICAgIHR5cGU6IE9iamVjdFxyXG4gICAgfSxcclxuICAgIG9yZGVyIDoge1xyXG4gICAgICAgIHR5cGU6IE9iamVjdFxyXG4gICAgfVxyXG59KTtcclxuXHJcbm1vY2tUcmFkZVNjaGVtYS5zdGF0aWNzLmZpbmRCeVVzZXJJZCA9IGFzeW5jIGZ1bmN0aW9uICh1c2VySWQpIHtcclxuICAgIGwuaW5mbyhgZmluZCB0aGUgbW9ja1RyYWRlIG9mIHVzZXIgJHt1c2VySWR9YCk7XHJcbiAgICBsZXQgbm93ID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBzdGFydE9mVG9kYXkgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIG5vdy5nZXREYXRlKCkpO1xyXG4gICAgbGV0IHN0YXJ0T2ZUb2RheVN0ciA9IGAke25vdy5nZXRGdWxsWWVhcigpfS0keygnMCcgKyAobm93LmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpfS0keygnMCcgKyBub3cuZ2V0RGF0ZSgpKS5zbGljZSgtMil9YDtcclxuICAgIHJldHVybiB0aGlzLmZpbmQoe1xyXG4gICAgICAgIHVzZXJJZDogbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQodXNlcklkKSxcclxuICAgICAgICAkb3I6IFt7Y3JlYXRlRGF0ZTogeyRndGU6IHN0YXJ0T2ZUb2RheX19LCB7J3BhcmFtcy5leGVjdXRlRGF0ZSc6IHskZ3RlOiBzdGFydE9mVG9kYXlTdHJ9fV0sXHJcbiAgICAgICAgZGVsZXRlZDogZmFsc2VcclxuICAgIH0pLnNvcnQoe2NyZWF0ZURhdGUgOiAtMX0pLnBvcHVsYXRlKCdzdHJhdGVneUlkJyk7XHJcbn1cclxuXHJcbm1vY2tUcmFkZVNjaGVtYS5zdGF0aWNzLmZpbmRCeVVzZXJJZEFuZERhdGVBbmRDb2RlID0gYXN5bmMgZnVuY3Rpb24odXNlcklkLCBjcmVhdGVkRGF0ZSwgY29kZSl7XHJcbiAgICBsLmluZm8oYGZpbmQgaGlzdG9yeSBtb2NrVHJhZGUgb2YgdXNlciAke3VzZXJJZH0sIGNyZWF0ZURhdGUgPSAke2NyZWF0ZWREYXRlfSwgY29kZSA9ICR7Y29kZX1gKTtcclxuICAgIGxldCBzdGFydERhdGUgPSBuZXcgRGF0ZShjcmVhdGVkRGF0ZSk7XHJcbiAgICBsZXQgZW5kRGF0ZSA9IG5ldyBEYXRlKGNyZWF0ZWREYXRlKTtcclxuICAgIGVuZERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpICsgMSk7XHJcbiAgICBsZXQgY29uZCA9IHtcclxuICAgICAgICB1c2VySWQ6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkKHVzZXJJZCksXHJcbiAgICAgICAgY3JlYXRlRGF0ZSA6IHskZ3RlOiBzdGFydERhdGUsICRsdDogZW5kRGF0ZX0sXHJcbiAgICAgICAgZGVsZXRlZDogZmFsc2VcclxuICAgIH07XHJcbiAgICBpZihjb2RlICE9IG51bGwgJiYgY29kZS5sZW5ndGggPiAwKXtcclxuICAgICAgICBjb25kLmNvZGUgPSBjb2RlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZmluZChjb25kKS5wb3B1bGF0ZSgnc3RyYXRlZ3lJZCcpO1xyXG59XHJcblxyXG5cclxuY29uc3QgbW9ja1RyYWRlID0gbW9uZ29vc2UubW9kZWwoJ01vY2tUcmFkZScsIG1vY2tUcmFkZVNjaGVtYSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtb2NrVHJhZGU7Il19